import numpy as np
import matplotlib.pyplot as plt
from io import StringIO

# Hard-coded data as a multi-line string.
data_str = """0	0
0.049891174	15.89670418
0.060298851	16.39412463
0.080547719	19.0118684
0.100796586	21.32041118
0.121045453	23.34573842
0.14129432	25.11383555
0.161543187	26.650688
0.181792054	27.98228121
0.202040922	29.12948248
0.222289789	30.08737612
0.242538656	30.8429457
0.262787523	31.38317189
0.28303639	31.69503533
0.300292641	31.77080728
0.303285257	31.76551668
0.323534125	31.5815966
0.343782992	31.14028317
0.364031859	30.54268936
0.384280726	29.95161181
0.404529593	29.53065484
0.42477846	29.41272823
0.445027328	29.54748065
0.465276195	29.81683635
0.485525062	30.10960617
0.505773929	30.38510303
0.526022796	30.64346594
0.546271663	30.88533261
0.566520531	31.11134074
0.586769398	31.32212805
0.607018265	31.51833226
0.627267132	31.70059108
0.647515999	31.86954222
0.667764866	32.02582341
0.688013733	32.17007234
0.708262601	32.30292674
0.728511468	32.42502432
0.748760335	32.5370028
0.769009202	32.63949989
0.789258069	32.73315329
0.809506936	32.81860074
0.829755804	32.89647994
0.850004671	32.9674286
0.870253538	33.03208443
0.890502405	33.09108517
0.910751272	33.14506851
0.931000139	33.19467217
0.951249007	33.24053386
0.971497874	33.28329131
0.991746741	33.32358221
1.011995608	33.3620443
1.032244475	33.39931527
1.052493342	33.43603285
1.07274221	33.47282777
1.092991077	33.51003584
1.113239944	33.54759554
1.133488811	33.58541735
1.153737678	33.62341174
1.173986545	33.66148915
1.194235412	33.69956006
1.21448428	33.73753493
1.234733147	33.77532422
1.254982014	33.81283841
1.275230881	33.84998794
1.295479748	33.88668329
1.315728615	33.92283491
1.335977483	33.95835328
1.35622635	33.99314886
1.376475217	34.02713211
1.396724084	34.06021349
1.416972951	34.09230347
1.437221818	34.12331251
1.457470686	34.15315107
1.477719553	34.18172963
1.49796842	34.20895863
1.518217287	34.23474856
1.538466154	34.25900986
1.558715021	34.28165301
1.578963889	34.30258846
1.599212756	34.32172669
1.619461623	34.33897815
1.63971049	34.35425331
1.659959357	34.36746265
1.680208224	34.37854185
1.700457092	34.38750641
1.720705959	34.39438754
1.740954826	34.39921646
1.761203693	34.4020244
1.78145256	34.40284258
1.801701427	34.40170222
1.821950294	34.39863455
1.842199162	34.39367078
1.862448029	34.38684213
1.882696896	34.37817984
1.902945763	34.36771511
1.92319463	34.35547917
1.943443497	34.34150325
1.963692365	34.32581856
1.983941232	34.30845633
2.004190099	34.28944777
2.024438966	34.26882412
2.044687833	34.24661659
2.0649367	34.2228564
2.085185568	34.19757477
2.105434435	34.17080294
2.125683302	34.14257211
2.145932169	34.11291351
2.166181036	34.08185837
2.186429903	34.0494379
2.206678771	34.01568332
2.226927638	33.98062586
2.247176505	33.94429674
2.267425372	33.90672718
2.287674239	33.86794841
2.307923106	33.82799163
2.328171973	33.78688809
2.348420841	33.74466899
2.368669708	33.70136556
2.388918575	33.65700903
2.409167442	33.6116306
2.429416309	33.56526151
2.449665176	33.51793298
2.469914044	33.46967623
2.490162911	33.42052247
2.510411778	33.37050294
2.530660645	33.31964885
2.550909512	33.26799142
2.571158379	33.21556189
2.591407247	33.16239146
2.611656114	33.10851136
2.631904981	33.05395281
2.652153848	32.99874704
2.672402715	32.94292526
2.692651582	32.88651871
2.71290045	32.82955859
2.733149317	32.77207613
2.753398184	32.71410255
2.773647051	32.65566908
2.793895918	32.59680693
2.814144785	32.53754733
2.834393653	32.4779215
2.85464252	32.41796066
2.874891387	32.35769604
2.895140254	32.29715885
2.915389121	32.23638031
2.935637988	32.17539166
2.955886855	32.1142241
2.976135723	32.05290887
2.99638459	31.99147718
3.016633457	31.92996025
3.036882324	31.86838931
3.057131191	31.80679559
3.077380058	31.74521029
3.097628926	31.68366464
3.117877793	31.62218986
3.13812666	31.56081719
3.158375527	31.49957783
3.178624394	31.438503
3.198873261	31.37762394
3.219122129	31.31697187
3.239370996	31.25657799
3.259619863	31.19647354
3.27986873	31.13668974
3.300117597	31.07725781
3.320366464	31.01820897
3.340615332	30.95957445
3.360864199	30.90138546
3.381113066	30.84367322
3.401361933	30.78646896
3.4216108	30.72980391
3.441859667	30.67370927
3.462108534	30.61821628
3.482357402	30.56335615
3.502606269	30.50916011
3.522855136	30.45565938
3.543104003	30.40288518
3.56335287	30.35086873
3.583601737	30.29964125
3.603850605	30.24923397
3.624099472	30.19967811
3.644348339	30.15100489
3.664597206	30.10324553
3.684846073	30.05643125
3.70509494	30.01059327
3.725343808	29.96576282
3.745592675	29.92197112
3.765841542	29.87924939
3.786090409	29.83762884
3.806339276	29.79714072
3.826588143	29.75781622
3.846837011	29.71968659
3.867085878	29.68278303
3.887334745	29.64713677
3.907583612	29.61277903
3.927832479	29.57974104
3.948081346	29.54805401
3.968330214	29.51774916
3.988579081	29.48885773
4.008827948	29.46141093
4.029076815	29.43543998
"""

# Use StringIO to simulate a file object from the string.
data_file = StringIO(data_str)

# Load data using np.loadtxt
data = np.loadtxt(data_file)

# Separate columns: x = CMOD, y = Load
x = data[:, 0]
y = data[:, 1]

# Define the special point (given in the instructions)
special_point = (0.049891174,15.89670418)
# Create the plot
plt.figure(figsize=(10, 6))

# Plot the entire curve as a black line with markers.
plt.plot(x, y, 'k-')

# Highlight the first two points with red markers.
if len(x) >= 2:

    plt.plot(x[1], y[1], 'ro', markersize=8)


# Draw a red dashed line from the origin to the special point.
plt.plot([0, special_point[0]], [0, special_point[1]], 'r--', linewidth=2)


# Set axis labels and title.
plt.xlabel("Crack Mouth Opening (mm)")
plt.ylabel("Load (kN)")
plt.title("Crack mouth opening displacement vs. Load ")
plt.legend(loc="upper left")
plt.grid(True)
plt.xlim(left=0)

plt.show()
