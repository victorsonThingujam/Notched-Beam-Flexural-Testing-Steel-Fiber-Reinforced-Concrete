import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from io import StringIO

# --- Hard-coded data string ---
data_str = """Deflection_Resampled    Smoothed_Load_Resampled
0	0
0.045032501	2.699260101
0.063232498	2.976538635
0.089457296	3.409525105
0.115682093	3.881323719
0.141906891	4.391177807
0.168131689	4.938330696
0.194356487	5.522025718
0.220581284	6.141506202
0.246806082	6.796015476
0.27303088	7.484796871
0.299255677	8.207093717
0.325480475	8.962149342
0.351705273	9.749207076
0.37793007	10.56751025
0.404154868	11.41630219
0.430379666	12.29482623
0.456604464	13.2023257
0.482829261	14.13801232
0.509054059	15.09878425
0.535278857	16.07769007
0.561503654	17.06741442
0.587728452	18.06064194
0.61395325	19.05005726
0.640178047	20.02834502
0.666402845	20.98818985
0.692627643	21.92227639
0.718852441	22.82328927
0.745077238	23.68391312
0.771302036	24.49683257
0.797526834	25.25473228
0.823751631	25.95029685
0.849976429	26.57621095
0.876201227	27.12515918
0.902426024	27.5898262
0.928650822	27.96301291
0.95487562	28.24460969
0.981100418	28.44556126
1.007325215	28.57777094
1.033550013	28.65314204
1.059774811	28.6835779
1.085999608	28.68098184
1.112224406	28.65725832
1.138449204	28.75213345
1.164674001	29.18889123
1.190898799	29.69965955
1.217123597	30.19610862
1.243348395	30.66673972
1.269573192	31.10009618
1.29579799	31.4847213
1.322022788	31.80915839
1.348247585	32.06195077
1.374472383	32.23372594
1.400697181	32.33067456
1.426921978	32.36602568
1.453146776	32.35304294
1.479371574	32.30498998
1.505596372	32.23513042
1.531821169	32.1567279
1.558045967	32.08304605
1.584270765	32.02734451
1.610495562	31.99904862
1.63672036	31.99660676
1.662945158	32.01651543
1.689169955	32.0552711
1.715394753	32.10937026
1.741619551	32.1753094
1.767844348	32.24975776
1.794069146	32.33096909
1.820293944	32.41804862
1.846518742	32.51010971
1.872743539	32.60626574
1.898968337	32.7056301
1.925193135	32.80731616
1.951417932	32.91043731
1.97764273	33.01410693
2.003867528	33.11743839
2.030092325	33.21954507
2.056317123	33.31954036
2.082541921	33.41653763
2.108766719	33.50965027
2.134991516	33.59815281
2.161216314	33.6819708
2.187441112	33.76119411
2.213665909	33.83591264
2.239890707	33.90621627
2.266115505	33.97219489
2.292340302	34.03393838
2.3185651	34.09153664
2.344789898	34.14507955
2.371014696	34.194657
2.397239493	34.24035888
2.423464291	34.28227506
2.449689089	34.32049545
2.475913886	34.35510992
2.502138684	34.38620836
2.528363482	34.41388067
2.554588279	34.43821672
2.580813077	34.4593064
2.607037875	34.47723961
2.633262673	34.49210623
2.65948747	34.50399614
2.685712268	34.51299923
2.711937066	34.5192054
2.738161863	34.52270451
2.764386661	34.52357635
2.790611459	34.52187097
2.816836256	34.51763295
2.843061054	34.5109069
2.869285852	34.5017374
2.89551065	34.49016907
2.921735447	34.47624649
2.947960245	34.46001426
2.974185043	34.44151697
3.00040984	34.42079924
3.026634638	34.39790564
3.052859436	34.37288077
3.079084233	34.34576925
3.105309031	34.31661565
3.131533829	34.28546457
3.157758627	34.25236062
3.183983424	34.21734839
3.210208222	34.18047248
3.23643302	34.14177748
3.262657817	34.10130798
3.288882615	34.05910859
3.315107413	34.01522391
3.34133221	33.96969852
3.367557008	33.92257703
3.393781806	33.87390402
3.420006604	33.82372411
3.446231401	33.77208188
3.472456199	33.71902193
3.498680997	33.66458886
3.524905794	33.60882727
3.551130592	33.55178174
3.57735539	33.49349688
3.603580187	33.43401729
3.629804985	33.37338755
3.656029783	33.31165227
3.68225458	33.24885605
3.708479378	33.18504347
3.734704176	33.12025914
3.760928974	33.05454766
3.787153771	32.98795361
3.813378569	32.9205216
3.839603367	32.85229622
3.865828164	32.78332207
3.892052962	32.71364374
3.91827776	32.64330584
3.944502557	32.57235295
3.970727355	32.50082968
3.996952153	32.42878062
4.023176951	32.35625037
4.049401748	32.28328353
4.075626546	32.20992468
4.101851344	32.13621843
4.128076141	32.06220938
4.154300939	31.98794211
4.180525737	31.91346123
4.206750534	31.83881134
4.232975332	31.76403703
4.25920013	31.68918289
4.285424928	31.61429353
4.311649725	31.53941353
4.337874523	31.4645875
4.364099321	31.38986004
4.390324118	31.31527573
4.416548916	31.24087918
4.442773714	31.16671498
4.468998511	31.09282773
4.495223309	31.01926203
4.521448107	30.94606246
4.547672905	30.87327364
4.573897702	30.80094015
4.6001225	30.72910659
4.626347298	30.65781756
4.652572095	30.58711765
4.678796893	30.51705146
4.705021691	30.44766359
4.731246488	30.37899864
4.757471286	30.31110119
4.783696084	30.24401585
4.809920882	30.17778722
4.836145679	30.11245989
4.862370477	30.04807845
4.888595275	29.9846875
4.914820072	29.92233165
4.94104487	29.86105548
4.967269668	29.80090359
4.993494465	29.74192058
5.019719263	29.68415105
5.045944061	29.62763959
5.072168859	29.57243079
5.098393656	29.51856927
5.124618454	29.4660996
5.150843252	29.41506639
5.177068049	29.36551424
5.203292847	29.31748774
"""

# Use StringIO to simulate a file-like object
data_file = StringIO(data_str)

# Read the data into a DataFrame using whitespace as delimiter
df = pd.read_csv(data_file, delim_whitespace=True)

# Print column names to confirm header parsing
print("Data columns:", df.columns.tolist())

# Extract x and y from the DataFrame
x = df["Deflection_Resampled"]
y = df["Smoothed_Load_Resampled"]

# Define the special point (same as given)
special_point = (0.045032501, 2.699260101)

# Create the plot
plt.figure(figsize=(10, 6))

# Plot the entire curve in black with markers
plt.plot(x, y, 'k-', label="LVDT Loadâ€“Deflection Curve")

# Draw a red dashed line from the origin to the special point
plt.plot([0, special_point[0]], [0, special_point[1]], 'r--', linewidth=2, label="FL Line")



# Set axis labels and title
plt.xlabel("LVDT Deflection (mm)")
plt.ylabel("Load (kN)")
plt.title("LVDT Deflection vs. Load ")
plt.grid(True)
plt.xlim(left=0)

plt.show()
